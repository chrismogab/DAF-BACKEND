{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cw20HookMsg",
  "description": "Cw20 Hook Message for Swapper contract.",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "ask_asset_info"
          ],
          "properties": {
            "ask_asset_info": {
              "$ref": "#/definitions/AssetInfoBase_for_Addr"
            },
            "recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Recipient"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ADORecipient": {
      "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Addr can also be a human-readable identifier used in a app contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AndrAddress": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "description": "Can be either an address or identifier of an ADO in a app.",
          "type": "string"
        }
      }
    },
    "AssetInfoBase_for_Addr": {
      "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of two variants:\n\n- CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - Native SDK coins. To create an **asset info** instance of this type, provide the denomination.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Recipient": {
      "oneOf": [
        {
          "description": "An address that is not another ADO. It is assumed that it is a valid address.",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "a_d_o"
          ],
          "properties": {
            "a_d_o": {
              "$ref": "#/definitions/ADORecipient"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
