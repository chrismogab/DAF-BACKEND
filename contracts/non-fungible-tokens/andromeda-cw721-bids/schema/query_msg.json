{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "andr_hook"
      ],
      "properties": {
        "andr_hook": {
          "$ref": "#/definitions/AndromedaHook"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bid"
      ],
      "properties": {
        "bid": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "all_bids"
      ],
      "properties": {
        "all_bids": {
          "type": "object",
          "required": [
            "purchaser"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "purchaser": {
              "type": "string"
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AndromedaHook": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "on_execute"
          ],
          "properties": {
            "on_execute": {
              "type": "object",
              "required": [
                "payload",
                "sender"
              ],
              "properties": {
                "payload": {
                  "$ref": "#/definitions/Binary"
                },
                "sender": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "on_funds_transfer"
          ],
          "properties": {
            "on_funds_transfer": {
              "type": "object",
              "required": [
                "amount",
                "payload",
                "sender"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Funds"
                },
                "payload": {
                  "$ref": "#/definitions/Binary"
                },
                "sender": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "on_transfer"
          ],
          "properties": {
            "on_transfer": {
              "type": "object",
              "required": [
                "recipient",
                "sender",
                "token_id"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "sender": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Funds": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Native"
          ],
          "properties": {
            "Native": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Cw20"
          ],
          "properties": {
            "Cw20": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
