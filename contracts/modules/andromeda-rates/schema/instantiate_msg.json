{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "rates"
  ],
  "properties": {
    "rates": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RateInfo"
      }
    }
  },
  "definitions": {
    "ADORecipient": {
      "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Addr can also be a human-readable identifier used in a app contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "AndrAddress": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "description": "Can be either an address or identifier of an ADO in a app.",
          "type": "string"
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "PercentRate": {
      "type": "object",
      "required": [
        "percent"
      ],
      "properties": {
        "percent": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "PrimitivePointer": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "The address of the primitive contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "key": {
          "description": "The optional key for the stored data.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Rate": {
      "description": "An enum used to define various types of fees",
      "oneOf": [
        {
          "description": "A flat rate fee",
          "type": "object",
          "required": [
            "flat"
          ],
          "properties": {
            "flat": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A percentage fee",
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "$ref": "#/definitions/PercentRate"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "external"
          ],
          "properties": {
            "external": {
              "$ref": "#/definitions/PrimitivePointer"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RateInfo": {
      "type": "object",
      "required": [
        "is_additive",
        "rate",
        "recipients"
      ],
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "is_additive": {
          "type": "boolean"
        },
        "rate": {
          "$ref": "#/definitions/Rate"
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recipient"
          }
        }
      }
    },
    "Recipient": {
      "oneOf": [
        {
          "description": "An address that is not another ADO. It is assumed that it is a valid address.",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "a_d_o"
          ],
          "properties": {
            "a_d_o": {
              "$ref": "#/definitions/ADORecipient"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
